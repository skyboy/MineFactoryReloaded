package powercrystals.minefactoryreloaded.api.plant;

import net.minecraft.block.Block;
import net.minecraft.block.state.IBlockState;
import net.minecraft.item.ItemStack;
import net.minecraft.util.math.BlockPos;
import net.minecraft.world.IBlockAccess;
import net.minecraft.world.World;
import powercrystals.minefactoryreloaded.api.util.IFactorySettings;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import java.util.List;
import java.util.Random;

/**
 * Defines a harvestable block for the Harvester.
 *
 * @author PowerCrystals
 */
public interface IFactoryHarvestable {

	/**
	 * Used to determine what Block in the world that this Harvestable manages.
	 *
	 * @return The block this Harvestable instance is managing.
	 */
	@Nonnull
	Block getPlant();

	/**
	 * Used to get the type of harvest operation.
	 *
	 * @return The type of harvest the Harvester should perform on this block.
	 */
	@Nonnull
	HarvestType getHarvestType();

	/**
	 * Used to determine if the Harvester should replace this block with air.
	 *
	 * @return Whether or not the Harvester should break the block when harvesting.
	 * If false, no changes will be performed by the Harvester itself.
	 */
	default boolean breakBlock() {

		return true;
	}

	/**
	 * Used to determine if this crop can be harvested; e.g., is it at a stage that drops crops, etc.<br>
	 * If you return {@link HarvestType#PlantStem} then this method will also be called on all 4 horizontally adjacent blocks.
	 *
	 * @param world
	 * 		The world this block is in.
	 * @param pos
	 * 		The position of the block being harvested.
	 * @param harvestState
	 * 		The original IBlockState of the harvestable before calling methods.
	 * 		You may need to call {@link IBlockState#getActualState(IBlockAccess, BlockPos) getActualState}.
	 * @param harvesterSettings
	 * 		The harvester's current settings. Do not modify these.
	 *
	 * @return True if this block can be harvested.
	 */
	boolean canBeHarvested(World world, BlockPos pos, IBlockState harvestState, IFactorySettings harvesterSettings);

	/**
	 * Used to get the drops of the block.
	 *
	 * @param world
	 * 		The world this block is in.
	 * @param pos
	 * 		The position of the block being harvested.
	 * @param harvestState
	 * 		The original IBlockState of the harvestable before calling methods.
	 * 		You may need to call {@link IBlockState#getActualState(IBlockAccess, BlockPos) getActualState}.
	 * @param rand
	 * 		A Random instance to use when generating drops.
	 * @param harvesterSettings
	 * 		The harvester's current settings. Do not modify these.
	 *
	 * @return The drops generated by breaking this block. For a default
	 * implementation, calling Block.getDrops() is usually sufficient.
	 */
	@Nullable
	List<ItemStack> getDrops(World world, BlockPos pos, IBlockState harvestState, Random rand, IFactorySettings harvesterSettings);

	/**
	 * Called before the block is going to be harvested and drops event fired, after
	 * {@link #getDrops(World, BlockPos, IBlockState, Random, IFactorySettings) getDrops}.
	 * <p>
	 * Usually empty.
	 *
	 * @param world
	 * 		The world this block is in.
	 * @param pos
	 * 		The position of the block being harvested.
	 * @param harvestState
	 * 		The original IBlockState of the harvestable before calling methods.
	 * 		You may need to call {@link IBlockState#getActualState(IBlockAccess, BlockPos) getActualState}.
	 */
	default void preHarvest(World world, BlockPos pos, IBlockState harvestState) {

	}

	/**
	 * Called after the block is going to be harvested. Used to re-till soil, for example.
	 *
	 * @param world
	 * 		The world this block is in.
	 * @param pos
	 * 		The position of the block being harvested.
	 * @param harvestState
	 * 		The original IBlockState of the harvestable before calling methods.
	 * 		You may need to call {@link IBlockState#getActualState(IBlockAccess, BlockPos) getActualState}.
	 *
	 * @return True if the harvester should play the break block sound and effect.
	 */
	default boolean postHarvest(World world, BlockPos pos, IBlockState harvestState) {

		world.notifyNeighborsRespectDebug(pos, getPlant(), true);
		return !this.breakBlock();
	}

}
